const z = () => {
  const S = (t) => {
    const { h: r, s: e, l: n } = t;
    return `hsl(${r.toFixed(0)}, ${e.toFixed(2)}%, ${n.toFixed(2)}%)`;
  }, $ = (t) => {
    const { r, g: e, b: n } = t;
    return `rgb(${r}, ${e}, ${n})`;
  }, f = (t) => {
    const { r, g: e, b: n } = t, s = (a) => a.toString(16).padStart(2, "0");
    return `#${s(r)}${s(e)}${s(n)}`;
  }, k = (t) => {
    let { r, g: e, b: n } = t;
    r /= 255, e /= 255, n /= 255;
    const s = Math.max(r, e, n), a = Math.min(r, e, n);
    let o = 0, h = 0, c = (s + a) / 2;
    if (s === a)
      o = h = 0;
    else {
      const l = s - a;
      switch (h = c > 0.5 ? l / (2 - s - a) : l / (s + a), s) {
        case r:
          o = (e - n) / l + (e < n ? 6 : 0);
          break;
        case e:
          o = (n - r) / l + 2;
          break;
        case n:
          o = (r - e) / l + 4;
          break;
      }
      o /= 6;
    }
    return { h: o * 360, s: h * 100, l: c * 100 };
  }, m = (t) => {
    const { l: r, c: e, h: n } = t, s = e * Math.cos(n * Math.PI / 180), a = e * Math.sin(n * Math.PI / 180);
    let o = (r + 16) / 116, h = s / 500 + o, c = o - a / 200;
    h = 0.95047 * (h ** 3 > 8856e-6 ? h ** 3 : (h - 0.13793103448275862) / 7.787), o = 1 * (o ** 3 > 8856e-6 ? o ** 3 : (o - 0.13793103448275862) / 7.787), c = 1.08883 * (c ** 3 > 8856e-6 ? c ** 3 : (c - 0.13793103448275862) / 7.787);
    let l = h * 3.2406 + o * -1.5372 + c * -0.4986, i = h * -0.9689 + o * 1.8758 + c * 0.0415, u = h * 0.0557 + o * -0.204 + c * 1.057;
    return l = l > 31308e-7 ? 1.055 * l ** 0.4166666666666667 - 0.055 : 12.92 * l, i = i > 31308e-7 ? 1.055 * i ** 0.4166666666666667 - 0.055 : 12.92 * i, u = u > 31308e-7 ? 1.055 * u ** 0.4166666666666667 - 0.055 : 12.92 * u, l = Math.min(Math.max(0, l), 1), i = Math.min(Math.max(0, i), 1), u = Math.min(Math.max(0, u), 1), {
      r: Math.round(l * 255),
      g: Math.round(i * 255),
      b: Math.round(u * 255)
    };
  }, H = (t) => {
    const r = m(t);
    return k(r);
  }, L = (t) => S(H(t)), O = (t) => {
    const r = m(t);
    return f(r);
  }, T = (t) => {
    let r = parseInt(t.slice(1, 3), 16), e = parseInt(t.slice(3, 5), 16), n = parseInt(t.slice(5, 7), 16);
    return { r, g: e, b: n };
  }, I = (t) => $(T(t)), B = (t) => {
    const r = T(t);
    return k(r);
  }, F = (t) => S(B(t)), G = (t) => {
    const { h: r, s: e, l: n } = t;
    let s, a, o;
    if (e === 0)
      s = a = o = n;
    else {
      const h = (i, u, g) => (g < 0 && (g += 1), g > 1 && (g -= 1), g < 0.16666666666666666 ? i + (u - i) * 6 * g : g < 0.5 ? u : g < 0.6666666666666666 ? i + (u - i) * (0.6666666666666666 - g) * 6 : i), c = n < 0.5 ? n * (1 + e) : n + e - n * e, l = 2 * n - c;
      s = h(l, c, r + 0.3333333333333333), a = h(l, c, r), o = h(l, c, r - 0.3333333333333333);
    }
    return {
      r: Math.round(s * 255),
      g: Math.round(a * 255),
      b: Math.round(o * 255)
    };
  }, R = (t) => {
    const r = t.r / 255, e = t.g / 255, n = t.b / 255;
    let s, a, o;
    [s, a, o] = [r, e, n].map(
      (b) => b <= 0.04045 ? b / 12.92 : ((b + 0.055) / 1.055) ** 2.4
    );
    let h = s * 0.4124564 + a * 0.3575761 + o * 0.1804375, c = s * 0.2126729 + a * 0.7151522 + o * 0.072175, l = s * 0.0193339 + a * 0.119192 + o * 0.9503041;
    [h, c, l] = [h, c, l].map((b) => b > 8856e-6 ? b ** 0.3333333333333333 : (903.3 * b + 16) / 116);
    let i = 116 * c - 16, u = 500 * (h - c), g = 200 * (c - l), M = Math.atan2(g, u) * (180 / Math.PI);
    M < 0 && (M += 360);
    const p = 100;
    let x = Math.sqrt(u * u + g * g);
    return x = x / p * 0.37, i = Math.round((i + 16) / 116 * 1e3) / 1e3, x = Number(x.toFixed(2)), M = Number(M.toFixed(1)), {
      l: i,
      c: x,
      h: M
    };
  }, d = (t) => {
    const { l: r, c: e, h: n } = R(t);
    return `oklch(${r} ${e} ${n})`;
  };
  return {
    hslToOklchString: (t) => {
      const r = G(t);
      return d(r);
    },
    hexToOklchString: (t) => {
      const r = T(t);
      return d(r);
    },
    hexToRGBString: I,
    hexToHSLString: F,
    oklchToHSLString: L,
    oklchToHex: O
  };
};
export {
  z as useOklchConverter
};
